Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.2.174 Build 20170213

Compiler options: -Wall -W -Werror -g -lm -std=gnu99 -O3 -qopenmp -qopt-report=3 -qopt-report-phase=vec -o gaussian

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at gaussian.c(211,3) inlined into gaussian.c(92,3)
   remark #15527: loop was not vectorized: function call to _mm_malloc(unsigned long long, unsigned long long) cannot be vectorized   [ gaussian.c(212,17) ]
LOOP END

LOOP BEGIN at gaussian.c(216,5) inlined into gaussian.c(92,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:scanf(const char *__restrict__, ...) (218:14) and call:printf(const char *__restrict__, ...) (219:11)

   LOOP BEGIN at gaussian.c(217,7) inlined into gaussian.c(92,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between call:scanf(const char *__restrict__, ...) (218:14) and call:printf(const char *__restrict__, ...) (219:11)
   LOOP END
LOOP END

LOOP BEGIN at gaussian.c(224,5) inlined into gaussian.c(92,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at gaussian.c(225,7) inlined into gaussian.c(92,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at gaussian.c(225,7) inlined into gaussian.c(92,3)
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 122 
      remark #15477: vector cost: 43.500 
      remark #15478: estimated potential speedup: 2.760 
      remark #15482: vectorized math library calls: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at gaussian.c(225,7) inlined into gaussian.c(92,3)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at gaussian.c(225,7) inlined into gaussian.c(92,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at gaussian.c(129,3) inlined into gaussian.c(99,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:printf(const char *__restrict__, ...) (131:7) and call:printf(const char *__restrict__, ...) (132:5)

   LOOP BEGIN at gaussian.c(130,5) inlined into gaussian.c(99,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   LOOP END
LOOP END

LOOP BEGIN at gaussian.c(151,3) inlined into gaussian.c(102,3)
   remark #15523: loop was not vectorized: loop control variable rowToSwap was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at gaussian.c(158,5) inlined into gaussian.c(102,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between diagnalValue (163:7) and diagnalValue (166:9)
   LOOP END

   LOOP BEGIN at gaussian.c(158,5) inlined into gaussian.c(102,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at gaussian.c(246,3) inlined into gaussian.c(104,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between result[j] (248:7) and result[i] (249:5)

   LOOP BEGIN at gaussian.c(247,5) inlined into gaussian.c(104,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between result[i] (248:7) and result[i] (248:7)
   LOOP END

   LOOP BEGIN at gaussian.c(247,5) inlined into gaussian.c(104,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at gaussian.c(297,3) inlined into gaussian.c(110,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at gaussian.c(298,5) inlined into gaussian.c(110,10)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at gaussian.c(300,7) inlined into gaussian.c(110,10)
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 14 
         remark #15477: vector cost: 4.500 
         remark #15478: estimated potential speedup: 2.970 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at gaussian.c(300,7) inlined into gaussian.c(110,10)
      <Remainder loop for vectorization>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at gaussian.c(300,7) inlined into gaussian.c(110,10)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at gaussian.c(310,3) inlined into gaussian.c(110,10)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 18 
   remark #15477: vector cost: 11.000 
   remark #15478: estimated potential speedup: 1.610 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at gaussian.c(310,3) inlined into gaussian.c(110,10)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at gaussian.c(274,5) inlined into gaussian.c(112,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at gaussian.c(183,5) inlined into gaussian.c(102,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between matrix (184:7) and matrix (189:9)

   LOOP BEGIN at gaussian.c(188,7) inlined into gaussian.c(102,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between matrix (189:9) and matrix (189:9)
   LOOP END

   LOOP BEGIN at gaussian.c(188,7) inlined into gaussian.c(102,3)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: print_matrix(int, double **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at gaussian.c(129,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:printf(const char *__restrict__, ...) (131:7) and call:printf(const char *__restrict__, ...) (132:5)

   LOOP BEGIN at gaussian.c(130,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: forward_elimination(int, double **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at gaussian.c(151,3)
   remark #15523: loop was not vectorized: loop control variable rowToSwap was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at gaussian.c(158,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between diagnalValue (163:7) and diagnalValue (166:9)
   LOOP END

   LOOP BEGIN at gaussian.c(158,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at gaussian.c(183,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between matrix[j][i] (184:7) and matrix[j][$i2] (189:9)

   LOOP BEGIN at gaussian.c(188,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between matrix[j][$i2] (189:9) and matrix[i][$i2] (189:9)
   LOOP END

   LOOP BEGIN at gaussian.c(188,7)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: fill_matrix(int, double **, double **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at gaussian.c(211,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm_malloc(unsigned long long, unsigned long long) (212:17) and orignalA[i] (213:5)
LOOP END

LOOP BEGIN at gaussian.c(216,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between call:scanf(const char *__restrict__, ...) (218:14) and orignalA[i] (221:9)

   LOOP BEGIN at gaussian.c(217,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between call:scanf(const char *__restrict__, ...) (218:14) and orignalA[i] (221:9)
   LOOP END
LOOP END

LOOP BEGIN at gaussian.c(224,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between call:drand48(void) (226:41) and matrix[i] (226:26)

   LOOP BEGIN at gaussian.c(225,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between call:drand48(void) (226:41) and matrix[i] (226:26)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: back_substitution(int, double **, double *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at gaussian.c(246,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between result[j] (248:7) and result[i] (249:5)

   LOOP BEGIN at gaussian.c(247,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between result[i] (248:7) and result[i] (248:7)
   LOOP END

   LOOP BEGIN at gaussian.c(247,5)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: print_results(int, double *, struct rusage, double, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at gaussian.c(274,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END
===========================================================================

Begin optimization report for: calculate_euclidean(int, double **, double *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at gaussian.c(297,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at gaussian.c(298,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at gaussian.c(300,7)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at gaussian.c(300,7)
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 14 
         remark #15477: vector cost: 4.000 
         remark #15478: estimated potential speedup: 3.280 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at gaussian.c(300,7)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at gaussian.c(300,7)
      <Remainder loop for vectorization>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at gaussian.c(300,7)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at gaussian.c(310,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 18 
   remark #15477: vector cost: 11.000 
   remark #15478: estimated potential speedup: 1.610 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at gaussian.c(310,3)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END
===========================================================================
